// source: hashing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.exportSymbol('proto.proto.Empty', null, global);
goog.exportSymbol('proto.proto.NodeMetaData', null, global);
goog.exportSymbol('proto.proto.RequestMetaData', null, global);
goog.exportSymbol('proto.proto.WebSocketMetadata', null, global);
goog.exportSymbol('proto.proto.WebSocketMetadata.DataCase', null, global);
goog.exportSymbol('proto.proto.WebSocketMetadataList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WebSocketMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.WebSocketMetadata.oneofGroups_);
};
goog.inherits(proto.proto.WebSocketMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.WebSocketMetadata.displayName = 'proto.proto.WebSocketMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NodeMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeMetaData.displayName = 'proto.proto.NodeMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RequestMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RequestMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RequestMetaData.displayName = 'proto.proto.RequestMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WebSocketMetadataList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.WebSocketMetadataList.repeatedFields_, null);
};
goog.inherits(proto.proto.WebSocketMetadataList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.WebSocketMetadataList.displayName = 'proto.proto.WebSocketMetadataList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Empty.displayName = 'proto.proto.Empty';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.WebSocketMetadata.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.proto.WebSocketMetadata.DataCase = {
  DATA_NOT_SET: 0,
  NODE_META_DATA: 3,
  REQUEST_META_DATA: 4
};

/**
 * @return {proto.proto.WebSocketMetadata.DataCase}
 */
proto.proto.WebSocketMetadata.prototype.getDataCase = function() {
  return /** @type {proto.proto.WebSocketMetadata.DataCase} */(jspb.Message.computeOneofCase(this, proto.proto.WebSocketMetadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.WebSocketMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.WebSocketMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.WebSocketMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WebSocketMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, ""),
action: jspb.Message.getFieldWithDefault(msg, 2, ""),
nodeMetaData: (f = msg.getNodeMetaData()) && proto.proto.NodeMetaData.toObject(includeInstance, f),
requestMetaData: (f = msg.getRequestMetaData()) && proto.proto.RequestMetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WebSocketMetadata}
 */
proto.proto.WebSocketMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.WebSocketMetadata;
  return proto.proto.WebSocketMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WebSocketMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WebSocketMetadata}
 */
proto.proto.WebSocketMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.proto.NodeMetaData;
      reader.readMessage(value,proto.proto.NodeMetaData.deserializeBinaryFromReader);
      msg.setNodeMetaData(value);
      break;
    case 4:
      var value = new proto.proto.RequestMetaData;
      reader.readMessage(value,proto.proto.RequestMetaData.deserializeBinaryFromReader);
      msg.setRequestMetaData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WebSocketMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.WebSocketMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WebSocketMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WebSocketMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeMetaData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.NodeMetaData.serializeBinaryToWriter
    );
  }
  f = message.getRequestMetaData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.RequestMetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.proto.WebSocketMetadata.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.WebSocketMetadata} returns this
 */
proto.proto.WebSocketMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.proto.WebSocketMetadata.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.WebSocketMetadata} returns this
 */
proto.proto.WebSocketMetadata.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NodeMetaData node_meta_data = 3;
 * @return {?proto.proto.NodeMetaData}
 */
proto.proto.WebSocketMetadata.prototype.getNodeMetaData = function() {
  return /** @type{?proto.proto.NodeMetaData} */ (
    jspb.Message.getWrapperField(this, proto.proto.NodeMetaData, 3));
};


/**
 * @param {?proto.proto.NodeMetaData|undefined} value
 * @return {!proto.proto.WebSocketMetadata} returns this
*/
proto.proto.WebSocketMetadata.prototype.setNodeMetaData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.WebSocketMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WebSocketMetadata} returns this
 */
proto.proto.WebSocketMetadata.prototype.clearNodeMetaData = function() {
  return this.setNodeMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WebSocketMetadata.prototype.hasNodeMetaData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestMetaData request_meta_data = 4;
 * @return {?proto.proto.RequestMetaData}
 */
proto.proto.WebSocketMetadata.prototype.getRequestMetaData = function() {
  return /** @type{?proto.proto.RequestMetaData} */ (
    jspb.Message.getWrapperField(this, proto.proto.RequestMetaData, 4));
};


/**
 * @param {?proto.proto.RequestMetaData|undefined} value
 * @return {!proto.proto.WebSocketMetadata} returns this
*/
proto.proto.WebSocketMetadata.prototype.setRequestMetaData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.WebSocketMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WebSocketMetadata} returns this
 */
proto.proto.WebSocketMetadata.prototype.clearRequestMetaData = function() {
  return this.setRequestMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WebSocketMetadata.prototype.hasRequestMetaData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeMetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
nodeIp: jspb.Message.getFieldWithDefault(msg, 2, ""),
nodeHash: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeMetaData}
 */
proto.proto.NodeMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeMetaData;
  return proto.proto.NodeMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeMetaData}
 */
proto.proto.NodeMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeHash();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.proto.NodeMetaData.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeMetaData} returns this
 */
proto.proto.NodeMetaData.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node_ip = 2;
 * @return {string}
 */
proto.proto.NodeMetaData.prototype.getNodeIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeMetaData} returns this
 */
proto.proto.NodeMetaData.prototype.setNodeIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 node_hash = 3;
 * @return {number}
 */
proto.proto.NodeMetaData.prototype.getNodeHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeMetaData} returns this
 */
proto.proto.NodeMetaData.prototype.setNodeHash = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RequestMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RequestMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RequestMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RequestMetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
assignedNodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
assignedNodeIp: jspb.Message.getFieldWithDefault(msg, 2, ""),
requestHash: jspb.Message.getFieldWithDefault(msg, 3, 0),
assignedNodeHash: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RequestMetaData}
 */
proto.proto.RequestMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RequestMetaData;
  return proto.proto.RequestMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RequestMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RequestMetaData}
 */
proto.proto.RequestMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssignedNodeName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssignedNodeIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAssignedNodeHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RequestMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RequestMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RequestMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RequestMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignedNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssignedNodeIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestHash();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAssignedNodeHash();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string assigned_node_name = 1;
 * @return {string}
 */
proto.proto.RequestMetaData.prototype.getAssignedNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RequestMetaData} returns this
 */
proto.proto.RequestMetaData.prototype.setAssignedNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string assigned_node_ip = 2;
 * @return {string}
 */
proto.proto.RequestMetaData.prototype.getAssignedNodeIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RequestMetaData} returns this
 */
proto.proto.RequestMetaData.prototype.setAssignedNodeIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 request_hash = 3;
 * @return {number}
 */
proto.proto.RequestMetaData.prototype.getRequestHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RequestMetaData} returns this
 */
proto.proto.RequestMetaData.prototype.setRequestHash = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 assigned_node_hash = 4;
 * @return {number}
 */
proto.proto.RequestMetaData.prototype.getAssignedNodeHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RequestMetaData} returns this
 */
proto.proto.RequestMetaData.prototype.setAssignedNodeHash = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.WebSocketMetadataList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.WebSocketMetadataList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.WebSocketMetadataList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.WebSocketMetadataList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WebSocketMetadataList.toObject = function(includeInstance, msg) {
  var f, obj = {
itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.proto.WebSocketMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WebSocketMetadataList}
 */
proto.proto.WebSocketMetadataList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.WebSocketMetadataList;
  return proto.proto.WebSocketMetadataList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WebSocketMetadataList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WebSocketMetadataList}
 */
proto.proto.WebSocketMetadataList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.WebSocketMetadata;
      reader.readMessage(value,proto.proto.WebSocketMetadata.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WebSocketMetadataList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.WebSocketMetadataList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WebSocketMetadataList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WebSocketMetadataList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.WebSocketMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WebSocketMetadata item = 1;
 * @return {!Array<!proto.proto.WebSocketMetadata>}
 */
proto.proto.WebSocketMetadataList.prototype.getItemList = function() {
  return /** @type{!Array<!proto.proto.WebSocketMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.WebSocketMetadata, 1));
};


/**
 * @param {!Array<!proto.proto.WebSocketMetadata>} value
 * @return {!proto.proto.WebSocketMetadataList} returns this
*/
proto.proto.WebSocketMetadataList.prototype.setItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.WebSocketMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.WebSocketMetadata}
 */
proto.proto.WebSocketMetadataList.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.WebSocketMetadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.WebSocketMetadataList} returns this
 */
proto.proto.WebSocketMetadataList.prototype.clearItemList = function() {
  return this.setItemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Empty}
 */
proto.proto.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Empty;
  return proto.proto.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Empty}
 */
proto.proto.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


